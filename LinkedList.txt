Linked List Data Structure

Problem Solutions:

1. Finding the Middle Node (Using the Tortoise and Hare Algorithm)
Explanation: Having two pointers one going twice as fast as the other pointer. Once the "hare" pointer reaches the end, the "tortoise" pointer will reach the middle node.

public Node findMiddleNode() {
        Node tortoise = head;
        Node hare = head;
        while (hare != null && hare.next != null) {
            hare = hare.next.next;
            tortoise = tortoise.next;
            

    }
            return tortoise;
}

2. Implement a method called hasLoop that checks whether the list contains a loop or not.
If the list contains a loop, the method should return true; otherwise, it should return false.

Explanation: Again use the Tortoise and Hare Algorithm, if there is a cycle, there should be a point where tortoise and hare are eventually equal.

 public boolean hasLoop () {
        Node tortoise = head;
        Node hare = head;
        
        while (hare != null && hare.next != null) {
            hare = hare.next.next;
            tortoise = tortoise.next;
            if (hare == tortoise) {
                return true;
            }
        }
        return false;
    }

3. Implement a method called findKthFromEnd that returns the k-th node from the end of the list.
If the list has fewer than k nodes, the method should return null.

Explanation: Use two pointers starting at head. Loop through a fast pointer kth times so it's ahead of the 2nd pointer. Once the fast pointer reaches the end of the Linked List, the Slow pointer will reach the kth node from the end of the list!

    public Node findKthFromEnd(int k) {
        Node hare = head;
        Node tortoise = head;
        
        for (int i = 0; i < k; i++) {
            if (hare == null) {
                return null;
            }
            hare = hare.next;
        }
        while (hare != null) {
            hare = hare.next;
            tortoise = tortoise.next;
        }
        return tortoise;
        
    }

4. Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode current = dummy; 
        while (current.next != null) {
            if (current.next.val == val) {
                current.next = current.next.next;
            } else {
            current = current.next;
            }

        }
        return dummy.next;
    }
}

5. You are given a singly linked list that contains integer values, where some of these values may be duplicated.
Your task is to implement a method called removeDuplicates() within the LinkedList class that removes all duplicate values from the list.

public void removeDuplicates() {
        Map<Integer, Integer> mapOfDupe = new HashMap<>();
        Node dummy = new Node(0);
        dummy.next = head;
        Node prev = dummy;
        Node current = dummy.next;
        
        while (current != null) {
            if (!mapOfDupe.containsKey(current.value)) {
                mapOfDupe.put(current.value, 1);
                prev = current;

            } else {
                prev.next = current.next;
                length -= 1;
            }
            current = current.next;
        }
    }

6. Reverse a Linked List

Explanation: Changing the direction of the pointers.

public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        ListNode next = null;

        while (current != null) {
                next = current.next;
                current.next = prev;
                prev = current;
                current = next;
        }
        return prev;
}

7. Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

    public ListNode detectCycle(ListNode head) {
        ListNode hare = head;
        ListNode tortoise = head;
        int count = 1;
        while (hare != null && hare.next != null) {
            hare = hare.next.next;
            tortoise = tortoise.next;
            if (hare == tortoise) {
               break;
                }
            }
            if (hare == null || hare.next == null) {
                return null;
            }
              tortoise = head;
        while (tortoise != hare) {
            tortoise = tortoise.next;
            hare = hare.next;
        }

        return hare;
    }
